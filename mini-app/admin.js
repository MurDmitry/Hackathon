// class AdminPanel {
//     constructor(user) {
//         this.user = user;
//     }

//     async init() {
//         await this.loadPendingIdeas();
//     }

//     async loadPendingIdeas() { 
//         const container = document.getElementById('pending-ideas-list');
//         if (container) {
//             container.innerHTML = '<div style="text-align: center; padding: 20px; color: #6c757d;">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–¥–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</div>';
//         }

//         try {
//             const API_BASE = window.location.origin;
//             const response = await fetch(`${API_BASE}/api/admin/pending-ideas`);
            
//             if (!response.ok) {
//                 throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
//             }
            
//             const ideas = await response.json();
//             this.renderPendingIdeas(ideas);
            
//         } catch (error) {
//             console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–¥–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', error);
//             // –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
//             this.renderPendingIdeas(this.getTestPendingIdeas());
//         }
//     }

//     renderPendingIdeas(ideas) {
//         const container = document.getElementById('pending-ideas-list');
//         if (!container) {
//             console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä pending-ideas-list –Ω–µ –Ω–∞–π–¥–µ–Ω");
//             return;
//         }
        
//         if (ideas.length === 0) {
//             container.innerHTML = `
//                 <div style="text-align: center; padding: 40px; color: #6c757d;">
//                     <div style="font-size: 48px; margin-bottom: 10px;">üì≠</div>
//                     <h3>–ù–µ—Ç –∏–¥–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</h3>
//                     <p>–í—Å–µ –∏–¥–µ–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!</p>
//                 </div>
//             `;
//             return;
//         }
        
//         container.innerHTML = ideas.map(idea => `
//             <div class="idea-card">
//                 <h3 style="margin: 0 0 10px 0; color: #2c3e50;">${idea.description}</h3>
                
//                 ${idea.justification ? `
//                     <div style="color: #495057; margin-bottom: 10px; font-style: italic;">
//                         "<strong>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</strong> ${idea.justification}"
//                     </div>
//                 ` : ''}
                
//                 ${idea.evidence_link ? `
//                     <div style="margin-bottom: 10px;">
//                         <strong>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</strong> 
//                         <a href="${idea.evidence_link}" target="_blank" style="color: #1e3c72;">
//                             ${idea.evidence_link}
//                         </a>
//                     </div>
//                 ` : ''}
                
//                 <div style="color: #6c757d; font-size: 14px; margin-bottom: 15px;">
//                     <div><strong>–ê–≤—Ç–æ—Ä:</strong> ${idea.author_name} (${idea.author_username})</div>
//                     <div><strong>–î–∞—Ç–∞:</strong> ${new Date(idea.created_at).toLocaleDateString('ru-RU')}</div>
//                     <div><strong>–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å:</strong> ${idea.is_anonymous ? '–î–∞' : '–ù–µ—Ç'}</div>
//                 </div>
                
//                 <div class="admin-actions">
//                     <button class="btn-approve" onclick="adminApproveIdea(${idea.id})">–û–¥–æ–±—Ä–∏—Ç—å</button>
//                     <button class="btn-reject" onclick="adminRejectIdea(${idea.id})">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
//                 </div>
//             </div>
//         `).join('');
//     }

//     // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
//     getTestPendingIdeas() {
//         return [
//             {
//                 id: 1,
//                 description: "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—á–µ—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞",
//                 justification: "–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ 8% –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞",
//                 evidence_link: "",
//                 author_name: "–ê—Ä—Å–µ–Ω–∏–π –ú–æ–∏—Å–µ–µ–≤",
//                 author_username: "arseny_m",
//                 created_at: "2025-18-10",
//                 is_anonymous: true
//             },
//             {
//                 id: 2,
//                 description: "–°–∏—Å—Ç–µ–º–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π",
//                 justification: "–ü–æ–≤—ã—à–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–µ–∫—É—á–∫–∏ –∫–∞–¥—Ä–æ–≤",
//                 evidence_link: "https://docs.google.com/document/example",
//                 author_name: "–ü–æ–ª–∏–∫–∞—Ä–ø–æ–≤–∞ –¢–∞–∏—Å–∏—è", 
//                 author_username: "taisiya_p",
//                 created_at: "2025-18-10",
//                 is_anonymous: false
//             },
//             {
//                 id: 3,
//                 description: "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
//                 justification: "–°–Ω–∏–∑–∏—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —É—Å–∫–æ—Ä–∏—Ç –æ—Ç–≤–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞–º",
//                 evidence_link: "",
//                 author_name: "–î–º–∏—Ç—Ä–∏–π –ú—É—Ä–∑–∞–µ–≤",
//                 author_username: "dmitry_m",
//                 created_at: "2025-18-10",
//                 is_anonymous: false
//             }
//         ];
//     }
// }

// // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
// async function adminApproveIdea(ideaId) {
//     if (!confirm('–û–¥–æ–±—Ä–∏—Ç—å —ç—Ç—É –∏–¥–µ—é?')) return;

//     try {
//         const savedAmount = prompt('–£–∫–∞–∂–∏—Ç–µ –æ—Ü–µ–Ω–∫—É —ç–∫–æ–Ω–æ–º–∏–∏ (–≤ —Ä—É–±–ª—è—Ö):', '10000');
//         if (savedAmount === null) return;
        
//         const comment = prompt('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):', '–ò–¥–µ—è –æ–¥–æ–±—Ä–µ–Ω–∞!');

//         const API_BASE = window.location.origin;
//         const response = await fetch(`${API_BASE}/api/admin/approve-idea`, {
//             method: 'POST',
//             headers: { 'Content-Type': 'application/json' },
//             body: JSON.stringify({
//                 idea_id: ideaId,
//                 saved_amount: parseInt(savedAmount) || 0,
//                 moderator_comment: comment || '',
//                 moderator_id: window.app?.currentUser?.id || 111111111
//             })
//         });

//         if (response.ok) {
//             alert('–ò–¥–µ—è –æ–¥–æ–±—Ä–µ–Ω–∞!');
//             // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
//             if (window.adminPanel) {
//                 window.adminPanel.loadPendingIdeas();
//             }
//         } else {
//             throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∏–¥–µ–∏');
//         }
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞:', error);
//         alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∏–¥–µ—é: ' + error.message);
//     }
// }

// async function adminRejectIdea(ideaId) {
//     const comment = prompt('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:');
//     if (comment === null) return;

//     try {
//         const API_BASE = window.location.origin;
//         const response = await fetch(`${API_BASE}/api/admin/reject-idea`, {
//             method: 'POST',
//             headers: { 'Content-Type': 'application/json' },
//             body: JSON.stringify({
//                 idea_id: ideaId,
//                 comment: comment,
//                 moderator_id: window.app?.currentUser?.id || 111111111
//             })
//         });

//         if (response.ok) {
//             alert('–ò–¥–µ—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!');
//             // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
//             if (window.adminPanel) {
//                 window.adminPanel.loadPendingIdeas();
//             }
//         } else {
//             throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∏–¥–µ–∏');
//         }
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞:', error);
//         alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏–¥–µ—é: ' + error.message);
//     }
// }